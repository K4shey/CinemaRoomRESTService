type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    public class Seat {
        private int row;
        private int column;
        private int price;


        public Seat() {

        }

        public Seat(int row, int col, int price) {
            this.row = row;
            this.column = col;
            this.price = price;
        }


        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }
    }
  learner_created: true
- name: src/cinema/TaskController.java
  visible: true
  text: |
    package cinema;

    import cinema.exception.RowOrColumnOutOfBoundException;
    import cinema.exception.TicketAlreadyPurchasedException;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.io.IOException;
    import java.util.List;


    @RestController
    public class TaskController {

        public final CinemaRoom cinemaRoom = new CinemaRoom();

        @GetMapping("/seats")
        public String returnOne() throws IOException {
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.writeValueAsString(cinemaRoom);
        }

        @PostMapping("/purchase")
        public String PurchaseSeatIfAvailable(@RequestBody Seat seat) {
            int row = seat.getRow();
            int column = seat.getColumn();
            if (row < 1 || row > cinemaRoom.COUNT_OF_ROWS || column < 1 || column > cinemaRoom.COUNT_OF_COLUMNS) {
                throw new RowOrColumnOutOfBoundException();
            }

            List<Seat> seats = cinemaRoom.getSeats();
            for (Seat nextSeat : seats) {
                if (nextSeat.getRow() == row && nextSeat.getColumn() == column) {
                    seats.remove(nextSeat);
                    return getSeatInfo(nextSeat);
                }
            }

            throw new TicketAlreadyPurchasedException();
        }

        private String getSeatInfo(Seat seat) {
            ObjectMapper objectMapper = new ObjectMapper();
            try {
                return objectMapper.writeValueAsString(seat);
            } catch (JsonProcessingException e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/cinema/exception/Response.java
  visible: true
  text: |
    package cinema.exception;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Response {

        @JsonProperty("error")
        private String message;

        public Response() {
        }

        public Response(String message) {
            this.message = message;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

    }
  learner_created: true
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.List;



    public class CinemaRoom {
        @JsonProperty("total_rows")
        public final int COUNT_OF_ROWS = 9;
        @JsonProperty("total_columns")
        public final int COUNT_OF_COLUMNS = 9;
        public static final int VIP_ROW_NUMBER_MAX = 4;
        public static final int VIP_ROW_PRICE = 10;
        public static final int REGULAR_ROW_PRICE = 8;

        @JsonProperty("available_seats")
        private List<Seat> seats = new ArrayList<>();

        public CinemaRoom(){
            for (int i = 0; i < COUNT_OF_ROWS; i++) {
                for (int j = 0; j < COUNT_OF_COLUMNS; j++) {
                    seats.add(new Seat(
                            i + 1,
                            j + 1,
                            i+1 <= VIP_ROW_NUMBER_MAX ? VIP_ROW_PRICE: REGULAR_ROW_PRICE));
                }
            }
        }

        public List<Seat> getSeats() {
            return seats;
        }
    }
  learner_created: true
- name: src/cinema/exception/GlobalExceptionHandler.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    @ControllerAdvice
    public class GlobalExceptionHandler {

        @ExceptionHandler(TicketAlreadyPurchasedException.class)
        public ResponseEntity<Response> handleTicketAlreadyPurchasedException(TicketAlreadyPurchasedException e) {
            Response response = new Response(e.getMessage());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(RowOrColumnOutOfBoundException.class)
        public ResponseEntity<Response> handleRowOrColumnOutOfBoundExceptionException(RowOrColumnOutOfBoundException e) {
            Response response = new Response(e.getMessage());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

    }
  learner_created: true
- name: src/cinema/exception/TicketAlreadyPurchasedException.java
  visible: true
  text: |
    package cinema.exception;

    public class TicketAlreadyPurchasedException extends RuntimeException {
        public TicketAlreadyPurchasedException() {
            super("The ticket has been already purchased!");
        }
    }
  learner_created: true
- name: src/cinema/exception/RowOrColumnOutOfBoundException.java
  visible: true
  text: |
    package cinema.exception;

    public class RowOrColumnOutOfBoundException extends RuntimeException {

        public RowOrColumnOutOfBoundException() {
            super("The number of a row or a column is out of bounds!");
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Unchecked
record: -1
